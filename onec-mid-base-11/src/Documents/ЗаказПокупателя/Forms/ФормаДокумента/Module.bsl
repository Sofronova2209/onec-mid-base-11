
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	///// SofronovaNV: Добавлена команда выводящая ГруппуСкидка, СогласованнаяСкидка и команда ПересчетТаблицы
	//Добавление группы формы
	
	Группа = Элементы.Добавить("ГруппаСкидка",Тип ("ГруппаФормы"),Элементы.ГруппаШапкаЛево);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Заголовок = "ГруппаСкидка";
	
	//добавление элемента СогласованнаяСкидка
	ТипРеквизита = Новый ОписаниеТипов("Число");
	
	ДобавляемыеРеквизиты =Новый Массив;
	РеквизитФормы = Новый РеквизитФормы ("СогласованнаяСкидка",ТипРеквизита,"","СогласованнаяСкидка");
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПолеВвода = Элементы.Добавить("СогласованнаяСкидка",Тип("ПолеФормы"),Элементы.ГруппаСкидка);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.Ширина = 5;
	ПолеВвода.ПутьКДанным = "Объект.СогласованнаяСкидка";
	ПолеВвода.УстановитьДействие("ПриИзменении","ПриИзмененииСогласованнаяСкидка");
	
	//Добавление команды формы ПересчетТаблицы
	Команда = Команды.Добавить ("ПересчетТаблицы");
	Команда.Заголовок = "Пересчет Таблицы";
	Команда.Действие = "КомандаПересчетТаблицы";
	
	//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
	КнопкаФормы = Элементы.Добавить("КнопкаПересчетТаблицы", Тип("КнопкаФормы"), Элементы.ГруппаСкидка);
	КнопкаФормы.ИмяКоманды = "ПересчетТаблицы";
	КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	
	////
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

//@skip-check module-structure-form-event-regions
&НаКлиенте
Асинх Процедура ПриИзмененииСогласованнаяСкидка(Элемент)
	
	///// SofronovaNV:
	// Запрашиваем у пользователя подтверждение на пересчёт асинхронно
   // Это необходимо для того, чтобы дать пользователю возможность решить - нужно ли применять новое значение согласованной скидки ко всем позициям документа
   // Использование асинхронного запроса позволяет избежать блокировки интерфейса при ожидании ответа пользователя
   // При этом выполнение кода приостанавливается только на время ожидания ответа, не нагружая систему
   // Формируем вопрос пользователю и ждём его ответа асинхронно
    // Если пользователь подтвердил необходимость пересчета, тогда
    //  добавляем в табличную часть Товары и Услуги в каждую строку Согласованную скидку
    //пересчитываем скидку в Таблице Товары и Услуги
    
    Режим = РежимДиалогаВопрос.ДаНет;
    Ответ = Ждать ВопросАсинх(НСтр("ru = 'Вы хотите пересчитать табличную часть с учётом новой скидки?'"), Режим);

    Если Ответ = КодВозвратаДиалога.Да Тогда

        Для каждого Строка Из Объект.Товары Цикл
            Строка.Скидка = Объект.СогласованнаяСкидка;
            РассчитатьСуммуСтроки(Строка);  
        КонецЦикла;
        
         Для каждого Строка Из Объект.Услуги Цикл
            Строка.Скидка = Объект.СогласованнаяСкидка;
            РассчитатьСуммуСтроки(Строка);  
        КонецЦикла;

    КонецЕсли;
	
КонецПроцедуры
////
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти



//@skip-check module-structure-top-region
#Область ОбработчикиКомандФормы

//@skip-check module-unused-method
//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура КомандаПересчетТаблицы (Команда)
	
	///// SofronovaNV: Добавлена команда выводящая ПересчетТаблицы c учетом скидки
	// Проверяем, что табличная часть не пустая
	Если Объект.Товары.Количество() > 0 Тогда
		
		// Перебираем строки табличной части
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.Скидка = Объект.СогласованнаяСкидка;
			РассчитатьСуммуСтроки(Строка); 
		КонецЦикла;
		
	КонецЕсли;  
	
	// Проверяем, что табличная часть не пустая
	Если Объект.Услуги.Количество() > 0 Тогда
		
		// Перебираем строки табличной части
		Для Каждого Строка Из Объект.Услуги Цикл
			Строка.Скидка = Объект.СогласованнаяСкидка;
			РассчитатьСуммуСтроки(Строка); 
		КонецЦикла;
		
	КонецЕсли;
	////
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	КоэффициентСкидки = 1 - ТекущиеДанные.Скидка / 100;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти